apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: nova-api
  title: Cadastrar API
  description: Execute para registrar API no catálogo.
spec:
  type: API
  owner: "group:default/gov-vr"
  parameters:
    - title: Identificação e Governança
      required: [tipoAPI, nome, descricao, versao, responsavel, urlSwagger] 
      properties:
        tipoAPI:
          title: Tipo de API
          type: string
          enum: [OpenAPI, GraphQL, gRPC, AsyncAPI]
        nome:
          title: Nome
          type: string
          description: "Entre apenas com letras maiúsculas/minúsculas, números, hífen, underscore e espaço. Sempre começe com uma letra. Não é aceito cedilha, acentuação ou caracteres especiais."
          pattern: '^[a-zA-Z][a-zA-Z0-9-_\s]*$'
          errorMessage: 
            pattern: 'Não aceita cedilha, acentos ou caracteres especiais. Somente letras maiúsculas/minúsculas, números, hífen, underscore e espaço. Sempre começe com uma letra.'
        descricao:
          title: Descrição
          description: Breve descrição funcional da API
          type: string
          ui:widget: textarea
          ui:options:
            rows: 5
          ui:help: "Dica: você pode colar texto multilinha aqui."
          ui:placeholder: |
            
            Digite ou cole aqui o seu texto.
            Múltiplas linhas são suportadas.
        versao:
          title: Versão
          description: Versão inicial da API
          type: string
          default: 1.0.0
          pattern: '^\d+\.\d+\.\d+$'
          errorMessage: "Formato de versão inválido. Use o formato X.Y.Z (exemplo: 1.0.0)."
        responsavel:
          title: Time responsável
          description: Time responsável pela API
          type: string
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: [Group]
            allowArbitraryValues: false
        buEcossistema:
          title: BU do Ecossistema
          type: string
          description: Selecione a BU do ecossistema o qual a API faz parte
          default: vr-beneficios
          enum: [vr-beneficios, vr-gente, vr-mobilidade, vr-shopping, vr-vexpense]
        urlSwagger:
          title: Arquivo Swagger (YAML)
          type: string
          ui:widget: file
        conformidadesRegulamentacoes:
          title: Conformidade e Regulamentações
          type: array
          items:
            type: string
            enum: [LGPD, PII, ISO9001, ISO25010]
          uniqueItems: true
          ui:widget: checkboxes
    - title: Integração e Consumo
      required: [tipoExposicaoEModeloAcesso]
      properties:
        servicosExpostos:
          title: Serviços Expostos
          type: array
          description: Listagem de serviços de backend expostos pela API
          items:
            type: string
            title: Serviço
            ui:field: EntityPicker
            ui:options:
              catalogFilter:
                kind: Component
                spec.type: Serviço
          uniqueItems: true
          errorMessage: "O mesmo item foi selecionado mais de uma vez. Favor selecionar somente um de cada."
        tipoExposicaoEModeloAcesso:
            title: Tipo de Exposição e Modelo de Acesso
            type: array
            description: "Selecione as TAGs apropriadas para Modelo de Acesso e Tipo de Exposição."
            items:
              type: string
            minItems: 1
            ui:field: EntityTagsPicker
            ui:options:
              allowArbitraryValues: false
              kinds: [API]
    - title: Observabilidade
      required: [monitoramento, urlMonitoramento]
      properties:
        monitoramento:
          title: Monitoramento Principal
          type: string
          description: A ferramenta principal utilizada para monitorar este recurso
          enum: [Nativo-Gateway, Dynatrace, Grafana, Zabbix, Prometheus]        
        urlMonitoramento:
          title: URL da Ferramenta de Monitoramento
          type: string
          description: O endereço da ferramenta de monitoramento para reste recurso. 
          pattern: '^http|https://[a-z0-9A-Z]*$'
          errorMessage: "Entre com uma URL HTTP/HTTPS"
    - title: Versionamento
      required: [repoOrg, repoName]
      properties:
        repoOrg:
          title: Organização
          type: string
          description: Selecione a organização do GitHub owner do componente
          default: vr-beneficios
          enum: [vr-beneficios, vr-gente, vr-mobilidade, vr-shopping, vr-vexpense, GOV-VR]
        repoName:
          title: Nome do repositório
          type: string
          description: Nome do repositório no GitHub a ser criado para este componente
          pattern: '^[a-zA-Z][a-zA-Z0-9-_]*$'
          errorMessage: 
            pattern: 'Entre somente com letras maiúsculas ou minúsculas, números, hífen ou underline'
  steps:
    - id: salvar-swagger
      name: Salvar Swagger
      action: custom:decodeBase64
      input:
        targetPath: ./swagger.yaml
        content: ${{ parameters.urlSwagger }}
    - id: fetch-skeleton
      name: Fetch Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        values:
          tipoAPI: ${{ parameters.tipoAPI }}
          nome: ${{ parameters.nome }}
          descricao: ${{ parameters.descricao | replace(r/\r?\n/g, '\n\r') }}
          versao: ${{ parameters.versao }}
          responsavel: ${{ parameters.responsavel }}
          urlSwagger: ${{ parameters.urlSwagger }}
          buEcossistema: ${{ parameters.buEcossistema }}
          conformidadesRegulamentacoes: ${{ parameters.conformidadesRegulamentacoes | default([]) | join(', ') }}
          servicosExpostos: ${{ parameters.servicosExpostos }}
          tipoExposicaoEModeloAcesso: ${{ parameters.tipoExposicaoEModeloAcesso }}
          monitoramento: ${{ parameters.monitoramento }}
          urlMonitoramento: ${{ parameters.urlMonitoramento }}          
    - id: publish
      name: Publica o repo no github
      action: publish:github
      if: ${{ parameters.repoUrl.includes('github.com') }}
      input:
        repoUrl: github.com?repo=${{ parameters.repoName }}&owner=${{ parameters.repoOrg }}
        defaultBranch: main
        gitCommitMessage: 'Initial: Criacao do repositorio e esqueleto do projeto ${{ parameters.nome }}'
        description: 'Initial: Criacao do repositorio e esqueleto do projeto ${{ parameters.nome }}'
    - id: register
      name: Register
      action: catalog:register
      if: ${{ parameters.repoUrl.includes('github.com') }}
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Abrir no catálogo
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
